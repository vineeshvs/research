# Slicing code
# Courtesy: Stackoverflow and many other sites  

from glob import iglob
import shutil
import os
import sys

print "\nHere we go" 
print "*************\n"

""" FUNCTION DEFINITIONS """
############################

"""Find a string between two strings"""
def find_between(s, first, last):
    try:
        start = s.index(first)+ len(first)
        end = s.index(last, start)
        return s[start:end]
    except ValueError:
        #print "error"
        return ""

'''
# Testing function find_between
s = "123vineeshabc"
a = find_between(s, "123", "abc")
print a
''' 

"""Print the contents of a file"""
def print_file(file_name):
    f_1 = open (file_name)
    for line in f_1:
        print line    

'''Remove spaces in a list of strings'''
def rem_space(list_name):  
	while True:
		try:
			list_name.remove("")
		except ValueError:
		    #print "No blank space in the string"
		    break
		pass

""" Find out the modules which gives certain signals as output """
def locate_modules(output_signal):
	print "work in progress"

"""Function to return the inputs and outputs of a module
Inputs: The name of MUT (Add the verilog file name later)
Outputs: Two lists inputs_test_module and outputs_test_module"""
def find_inputs_of_module(verilog_file, module_name):
	lines = open(verilog_file, 'rt').read()
	""" Extracting inputs and outputs of module to be tested """
	inputs_test_module = []
	outputs_test_module = []
	k = 0
	i = 0		
	with open('full_adder.v')as f:
		for line in f:
			if module_name in line:
				i = 1
			elif ");" in line:
				i = 0
			if i == 1:
				if "Inputs" in line:
					k = 1
				elif "Outputs" in line:
					k = 2
				if k == 1:	
					#m = find_between (line, "(", ")")
					#print m
					inputs_test_module.append (find_between (line, "(", ")"))
					if "End of inputs" in line:
						k = 0
				elif k == 2:	
					#m = find_between (line, "(", ")")
					#print m
					outputs_test_module.append (find_between (line, "(", ")"))
					if "End of outputs" in line:
						k = 0
	""" Removing spaces in the strings 'inputs_test_module' and 'outputs_test_module """
	rem_space (inputs_test_module)
	#print inputs_test_module
	rem_space (outputs_test_module)
	#print outputs_test_module
	return inputs_test_module, outputs_test_module

""" MAIN()"""
##############

""" Searching for module name """
module = raw_input ("Give the name of the module to be tested:")
print find_inputs_of_module("full_adder.v", module)

